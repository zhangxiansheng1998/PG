import org.apache.jmeter.util.JMeterUtils;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public static boolean delAllFile(String path) {
	boolean flag = false;
	File file = new File(path);
	if (!file.exists()) {
		return flag;
	}
	if (!file.isDirectory()) {
		return flag;
	}
	String[] tempList = file.list();
	if(tempList.length<=0){
		return true;
	}
	
	File temp = null;
	for (int i = 0; i < tempList.length; i++) {
		if (path.endsWith(File.separator)) {
             	temp = new File(path + tempList[i]);
          } else {
              	temp = new File(path + File.separator + tempList[i]);
          }
          if (temp.isFile()) {
             	temp.delete();
          }
          if (temp.isDirectory()) {
             	delAllFile(path + "/" + tempList[i]);//先删除文件夹里面的文件
             	delFolder(path + "/" + tempList[i]);//再删除空文件夹
             	flag = true;
          }
       }
	return flag;
}

public static void delFolder(String folderPath) {
     try {
        	delAllFile(folderPath); //删除完里面所有内容
        	String filePath = folderPath;
        	filePath = filePath.toString();
        	java.io.File myFilePath = new java.io.File(filePath);
        	myFilePath.delete(); //删除空文件夹
     } catch (Exception e) {
       	e.printStackTrace();
     }
}

public static void copyDir(String oldPath, String newPath) throws IOException {
   	File file = new File(oldPath);
   	//文件名称列表
   	String[] filePath = file.list();

   	if (!(new File(newPath)).exists()) {
       	(new File(newPath)).mkdir();
   	}

   	for (int i = 0; i < filePath.length; i++) {
       	if ((new File(oldPath + file.separator + filePath[i])).isDirectory()) {
           	copyDir(oldPath  + file.separator  + filePath[i], newPath  + file.separator + filePath[i]);
       	}

       	if (new File(oldPath  + file.separator + filePath[i]).isFile()) {
           	copyFile(oldPath + file.separator + filePath[i], newPath + file.separator + filePath[i]);
       	}
   	}
}

public static void copyFile(String oldPath, String newPath) throws IOException {
   	File oldFile = new File(oldPath);
   	File file = new File(newPath);
 	FileInputStream in = new FileInputStream(oldFile);
   	FileOutputStream out = new FileOutputStream(file);

   	byte[] buffer=new byte[1024];
	int len =0;
  	 while((len=in.read(buffer)) != -1){
       	out.write(buffer,0,len);
   	}
   	
	in.close();
     out.close();
}

//String reportPath = props.get("homeDirectory")+File.separator+"TestResults"+File.separator+"CaptureRequestTestCaseTest2.html";
SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmm");//设置日期格式
System.out.println(df.format(new Date()));// new Date()为获取当前系统时间
String env = props.get("envirnoment");
String reportName = "PaymentGateway_Automation_Report_"+env+"_"+df.format(new Date())+".html";
String reportPath = props.get("homeDirectory")+File.separator+"TestResults"+File.separator+reportName;
String caseCountName = "CaseTypeCount_"+env+"_"+df.format(new Date())+".html";
String caseCountPath = props.get("homeDirectory")+File.separator+"TestResults"+File.separator+caseCountName;
log.info("start print html report");

String deletePath = props.get("homeDirectory")+File.separator+"TestResults";
File deletefile=new File(deletePath);
File[] filesdel = deletefile.listFiles();
for(File file : filesdel){ 
  log.info("start print html report"+file.getName());
  if(file.getName().contains(".html")){
      file.delete();
  }
}

try{
	reportHtmlWorker.createCountHtml(caseCountPath);
	reportHtmlWorker.createHtml(reportPath);
}catch (Exception e) {
	log.error("print html report failed"+e);
}finally{
	jmeterCache.clearAll();
}

String jMeterHome = JMeterUtils.getJMeterHome();
String logDir = jMeterHome+File.separator+"TestExecutionLogs";
String logPath = props.get("homeDirectory")+File.separator+"TestExecutionLogs";

if(props.get("jMeterGui").trim().toUpperCase().equals("TRUE")){
	if(delAllFile(logPath)){
		copyDir(logDir,logPath);
	}else{
		log.error("delete file failed");
	}	
}

