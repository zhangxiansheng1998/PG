import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public static byte[] encodeWithHMACSHA2(String text, String keyString)
		throws NoSuchAlgorithmException, java.security.InvalidKeyException {
	if(text == null){
		return null;
	}
	Key sk = new SecretKeySpec(keyString.getBytes(StandardCharsets.UTF_8), "HMACSHA512");
	Mac mac = Mac.getInstance(sk.getAlgorithm());
	mac.init(sk);
	return mac.doFinal(text.getBytes(StandardCharsets.UTF_8));
}

public static String byteToHexString(byte[] byData) {
	if(byData == null){
		return null;
	}
	StringBuilder sb = new StringBuilder(byData.length * 2);

	for (int i = 0; i < byData.length; i++) {
		int v = byData[i] & 0xff;
		if (v < 16){
			sb.append('0');
		}
		sb.append(Integer.toHexString(v));
	}
	return sb.toString();
}

String requestLogin = vars.get("requestLogin");
String signatureKey = null;
if("AGODA".equals(requestLogin)){
  signatureKey = props.get("agodaSignatureKey");
}else if("NTT".equals(requestLogin)){
  signatureKey = props.get("nttSignatureKey");
}else{
  signatureKey = vars.get("signatureKey");
}
log.info("see value ------------signatureKey----->"+signatureKey);

String headerSignature = vars.get("headerSignature");
if("true".equals(headerSignature)){
    log.info("headerSignature is true in signatureGeneration.bsh");
    String headerSignatureData = vars.get("headerSignatureData");
    log.info("see value ------------signature--headerSignatureData:--->"+headerSignatureData);
    log.info("see value ------------signature--signatureKey:--->"+signatureKey);
	String headerSignatureEncryptedResult = byteToHexString(encodeWithHMACSHA2(headerSignatureData, signatureKey));
	log.info("see value ------------signature--headerSignatureEncryptedResult:--->"+headerSignatureEncryptedResult);
	vars.put("headerSignatureValue", headerSignatureEncryptedResult);
}
else{
		String signatureData = vars.get("signatureData");

		log.info("see value ------------signatureData----->"+signatureData);

		String encryptedResult = byteToHexString(encodeWithHMACSHA2(signatureData, signatureKey));
		vars.put("signature", encryptedResult);
		String encryptSignature = vars.get("signature");
		log.info("see value ------------signature--encryptedResult--->"+encryptedResult);
        log.info("see value ------------signature11111--->"+encryptSignature);
}