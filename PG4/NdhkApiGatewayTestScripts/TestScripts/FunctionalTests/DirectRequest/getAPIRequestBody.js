eval(props.get("commonUtilsJsContent"));

var jsonData = JSON.parse(vars.get("jsonData"));
var dataObj = vars.getObject("dataObj");
var requestType = vars.get("requestType");
var requestBody = JSON.parse(props.get(requestType + "Body"));


// 2021.08.12 add v2capture handling
log.info("get API handling");
log.info(requestType);
if(requestType.contains("ApiKey")){
   commonUtils.setApiKeyConfig(jsonData.merchantId,requestType);
   log.info("get ApiKey from config: "+vars.get("apikey"));
   log.info("get signatureKey from config: "+vars.get("signatureKey"));
}

commonUtils.setGenralParameters();
commonUtils.setDataObjIntoVars(dataObj);                   //dataObj  --------   json requestBody     存放到vars中
commonUtils.removeUnusedKey(requestBody);			    //如果requestBody中的某个字段在vars中找不到，删除


//apikey
log.info("apikey: "+dataObj.apikey);
if(dataObj.apikey){
   log.info("apikey from json File: "+dataObj.apikey);
   vars.put("apikey",dataObj.apikey);
}

commonUtils.setVarsKeyIntoRequestBody(requestBody);

var signatureBody="";
var transactionId="";
log.info("requestBody transactionId :"+dataObj.transactionId);
log.info("transactionId from result of last request:"+vars.get("transactionId"));
if(dataObj.transactionId){
	log.info("requestBody.transactionId from current request :"+dataObj.transactionId);
   	transactionId=dataObj.transactionId;
   	signatureBody=transactionId;
}else if(vars.get("transactionId")){
    log.info("requestBody.transactionId from last request :"+vars.get("transactionId"));
   	transactionId=vars.get("transactionId");
   	signatureBody=transactionId;
}
log.info("transactionId: "+transactionId);


var gatewayReferenceId="";
if(dataObj.gatewayReferenceId){
	log.info("gatewayReferenceId from current request: "+dataObj.gatewayReferenceId);
   	gatewayReferenceId=dataObj.gatewayReferenceId;
   	signatureBody=signatureBody+gatewayReferenceId;
}else if(vars.get("gatewayReferenceId")){
    log.info("gatewayReferenceId from last request :"+vars.get("gatewayReferenceId"));
   	gatewayReferenceId=vars.get("gatewayReferenceId");
   	signatureBody=signatureBody+gatewayReferenceId;
}
log.info("gatewayReferenceId: "+gatewayReferenceId);

log.info("signatureBody generated by transactionId and gatewayReferenceId: "+signatureBody);

var token="";
log.info("requestBody token :"+dataObj.token);
log.info("token from result of last request:"+vars.get("token"));
if(dataObj.token){
	log.info("requestBody.token from current request :"+dataObj.token);
   	token=dataObj.token;
   	signatureBody=token;
}else if(vars.get("token")){
    log.info("requestBody.token from last request :"+vars.get("token"));
   	token=vars.get("token");
   	signatureBody=token;
}
log.info("token: "+token);

var headerToken = requestBody.headerToken;
var headerAuthorization = requestBody.headerAuthorization;
var headerSignature = requestBody.headerSignature;
log.info("see value  ----------headerToken------------>"+headerToken);
log.info("see value  ----------headerAuthorization------------>"+headerAuthorization);
log.info("see value  ----------headerSignature------------>"+headerSignature);
vars.put("headerToken",headerToken);
vars.put("headerAuthorization",headerAuthorization);
vars.put("headerSignature",headerSignature);

//apikey
log.info("apikey: "+requestBody.apikey);
if(dataObj.apikey){
   log.info("apikey from json File: "+dataObj.apikey);
   vars.put("apikey",dataObj.apikey);
}

//signature
log.info("requestBody.signature: "+dataObj.signature);
if(dataObj.signature){
   log.info("signature from json File: "+dataObj.signature);
   vars.put("signature",dataObj.signature);
}
else{
	log.info("set signature as undefined: "+dataObj.signature);
	log.info("headerSignature: "+headerSignature);
	vars.put("signature",dataObj.signature);
	if(headerSignature==true){
		log.info("headerSignature is true");
		if(requestType=="getTransactionsV2ApiKey"){
		   log.info("headerSignatureData of getTransactionsV2ApiKey: "+signatureBody);
		   vars.put("headerSignatureData", signatureBody);
		}else if(requestType=="getV2TokenApiKey"){
			log.info("headerSignatureData of getV2TokenApiKey: "+signatureBody);
		   vars.put("headerSignatureData", signatureBody);
		}else{
			log.info("headerSignature is false");
			vars.put("headerSignatureData", "testSignatureData");
		}
		
	}else{
    	var signatureData = commonUtils.generateSignatureData(requestType, requestBody);

		log.info("see value  ----------signatureKey------------>"+jsonData.merchantId);
		log.info("see value  ----------signatureKey------------>"+props.get("nttSignatureKey"));

		if(undefined!=jsonData["signatureKey"]){
			vars.remove("signatureKey");
			vars.put("signatureKey",jsonData["signatureKey"]);
		}

		vars.put("signatureData", signatureData);
    }
}


//set requestURL
var requestURL="";
requestURL=props.get(requestType + "URL");
log.info("origin requestURL:", requestURL);

if("retrievePublicKey"==requestType){
	var apikey="";
	apikey=vars.get("apikey");
	if(apikey!=""){
		requestURL=requestURL+"?apiKey="+apikey;
		log.info("XQY retrievePublicKey");
	}
}


if("getTransactionsV2ApiKey"==requestType){
	if(transactionId!=""){
		requestURL=requestURL+"/"+transactionId;
	}
	if(gatewayReferenceId!=""){
		requestURL=requestURL+"/"+gatewayReferenceId;
	}
}


if("getV2TokenApiKey"==requestType){
	if(token!=""){
		requestURL=requestURL+"/"+token;
	}
}

vars.put("requestURL", requestURL);
log.info("updated requestURL:", requestURL);

//oauth2
var token = vars.get("access_token");
if(typeof(token) == "undefined" || token == '' || token == null){
	var dataObjToken = dataObj.accessToken;
	log.info("dataObjToken222:", dataObjToken);
	if(typeof(dataObjToken) == "undefined" || dataObjToken == '' || dataObjToken == null){
		vars.putObject("access_token", "");
	}else{
		vars.put("access_token", dataObjToken);
	}
}else{
	if(token.contains("Bearer")){
		vars.put("access_token", token);
	}else{
		vars.put("access_token", "Bearer"+" "+token);
	}
}

//jsfk token

var token = vars.get("token");
if(typeof(token) == "undefined" || token == '' || token == null){
	var dataObjToken = dataObj.token;
	if(typeof(dataObjToken) == "undefined" || dataObjToken == '' || dataObjToken == null){
		vars.putObject("token", "");
	}else{
		vars.put("token", dataObjToken);
	}
}else{
	if(token.contains("Bearer")){
		vars.put("token", token);
	}else{
		vars.put("token", "Bearer"+" "+token);
	}
}




