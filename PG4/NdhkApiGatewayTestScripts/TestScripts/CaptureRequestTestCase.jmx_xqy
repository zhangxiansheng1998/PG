<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Functional Tests" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Set Config" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">480</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Properties Setting" enabled="true"/>
        <hashTree>
          <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Config Property Reader" enabled="true">
            <stringProp name="propFilePath">config.properties</stringProp>
          </com.tag.jmeter.ext.config.PropertyReader>
          <hashTree/>
          <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Request Property Reader" enabled="true">
            <stringProp name="propFilePath">request.properties</stringProp>
          </com.tag.jmeter.ext.config.PropertyReader>
          <hashTree/>
          <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Environment Properties Reader" enabled="true">
            <stringProp name="propFilePath">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;Environment&quot; + File.separator + (props.get(&quot;env&quot;) != null? props.get(&quot;env&quot;): props.get(&quot;cmd_environmentPropertiesPath&quot;))+ &quot;_environment.properties&quot;)}</stringProp>
          </com.tag.jmeter.ext.config.PropertyReader>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Config Setting" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;PropertiesSetting&quot; + File.separator + &quot;configSetting.bsh&quot;)}</stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Convert JSON to CSV" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="JSON Content" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;PropertiesSetting&quot; + File.separator + &quot;JSONToCSV&quot; + File.separator + &quot;jsonContent.bsh&quot;)}</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="CSV Content" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;PropertiesSetting&quot; + File.separator + &quot;JSONToCSV&quot; + File.separator + &quot;csvContent.bsh&quot;)}</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Write CSV File" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;PropertiesSetting&quot; + File.separator + &quot;JSONToCSV&quot; + File.separator + &quot;writeCsvFile.bsh&quot;)}</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Convert JSON to CSV" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;Convert JSON to CSV&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set Thread Number" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;PropertiesSetting&quot; + File.separator + &quot;setThreadNumber.bsh&quot;)}</stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set Web Driver" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;PropertiesSetting&quot; + File.separator + &quot;setWebDriver.bsh&quot;)}</stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path"></stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Functional Tests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadNumber)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadNumber)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Auto Test JSON Data" enabled="true">
          <stringProp name="filename">${__P(testDataCSVPath)}</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">jsonData</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Test Flow" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;setTestFlow.js&quot;)}</stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script"></stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Test Flow Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;requestType&quot;) !== &quot;undefined&quot; &amp;&amp; (vars.get(&quot;skip&quot;) === &quot;undefined&quot; ||vars.get(&quot;skip&quot;) !== &quot;true&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Data Object" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;setDataObject.js&quot;)}</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;setDataObject.js&quot;)}</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Direct Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;oauthToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;accountUpdater&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;checkToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;jsonOauthToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;jsonV2TokenApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;formTransactionsV2ApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getTransactionsV2ApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putAccountV2UpdatesApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteAccountV2UpdatesApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getV2TokenApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteV2TokenApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putV2TokenApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;formpaymentRequest&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;formTokenizeRequest&quot;) == -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear header before http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;apikey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear signature after http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;signature&quot;, null);
vars.remove(&quot;signature&quot;);
vars.remove(&quot;headerSignatureData&quot;);
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="put V2 AccountUpdates" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putAccountV2UpdatesApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear header before http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;apikey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear signature after http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;signature&quot;, null);
vars.remove(&quot;signature&quot;);
vars.remove(&quot;headerSignatureData&quot;);
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="delete V2 AccountUpdater" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteAccountV2UpdatesApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear header before http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;apikey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear signature after http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;signature&quot;, null);
vars.remove(&quot;signature&quot;);
vars.remove(&quot;headerSignatureData&quot;);
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="get v2Transaction" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getTransactionsV2ApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;getAPIRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear header before http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;apikey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear signature after http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;signature&quot;, null);
vars.remove(&quot;signature&quot;);
vars.remove(&quot;headerSignatureData&quot;);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="get v2Tokens" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getV2TokenApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;getAPIRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear header before http request" enabled="false">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;akiKey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear signature after http request" enabled="false">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;signature&quot;, null);
vars.remove(&quot;signature&quot;);
vars.remove(&quot;headerSignatureData&quot;);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="delete v2Tokens" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteV2TokenApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="put v2Tokens" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putV2TokenApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="json V2tokens request " enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;jsonV2TokenApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear header before http request" enabled="false">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;akiKey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear signature after http request" enabled="false">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;signature&quot;, null);
vars.remove(&quot;signature&quot;);
vars.remove(&quot;headerSignatureData&quot;);


</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Invalid Token Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1765392418">200|400|401|403</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear header after http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;akiKey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Cybersource 3DS" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;) !== &quot;undefined&quot; &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;cybs3DS&quot;) &gt; -1 &amp;&amp; vars.get(&quot;redirect_url&quot;)!==null)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setting up the browser" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;testUI.bsh&quot;)}</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Sampler>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//import com.alibaba.fastjson.JSON;
//import com.alibaba.fastjson.JSONArray;
//import com.alibaba.fastjson.JSONObject;
//import net.sf.json.JSONArray;
//import net.sf.json.JSONObject;
//import java.util.Iterator;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import org.testng.Assert;
import org.openqa.selenium.*;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
 
import org.htmlcleaner.CleanerProperties;
import org.htmlcleaner.DomSerializer;
import org.htmlcleaner.HtmlCleaner;
import org.htmlcleaner.TagNode;
import org.w3c.dom.Document;


public static void inputErrorLog(String message){
	Failure = true; 
     FailureMessage = &quot;[&quot;+vars.get(&quot;testDataId&quot;)+&quot;]An error occurred,&quot;+message;
     log.error(&quot;\n=============================================================\n&quot;+FailureMessage+&quot;\n=============================================================&quot;);
}

public static void Assert(String actual, String expected,String message){
	if(expected == null || expected.length() == 0){  //Is Null
		if(actual != null &amp;&amp; actual.length() != 0){
			Failure = true; 
     		FailureMessage = vars.get(&quot;testDataId&quot;)+&quot;:&quot;+message+&quot;,look forward to[&quot;+expected+&quot;],Actually[&quot;+actual+&quot;].&quot;;
     		log.error(&quot;\n=============================================================\n&quot;+FailureMessage+&quot;\n=============================================================&quot;);
		}
	}else if(expected.contains(&quot;#Contains-&quot;)){  //Contains
		String[] str = expected.split(&quot;-&quot;);
		if(str.length&lt;=1){
			Failure = true; 
     		FailureMessage = vars.get(&quot;testDataId&quot;)+&quot;:&quot;+message+&quot;,look forward to[&quot;+expected+&quot;],Actually[&quot;+actual+&quot;].&quot;;
     		log.error(&quot;\n=============================================================\n&quot;+FailureMessage+&quot;\n=============================================================&quot;);
		}else{
			if(!actual.contains(str[1])) {
				Failure = true; 
     			FailureMessage = vars.get(&quot;testDataId&quot;)+&quot;:&quot;+message+&quot;,look forward to[&quot;+expected+&quot;],Actually[&quot;+actual+&quot;].&quot;;
     			log.error(&quot;\n=============================================================\n&quot;+FailureMessage+&quot;\n=============================================================&quot;);
        		}
		}
	} else if(expected.contains(&quot;@@#-&quot;)){    //Not Equals
		String[] str = expected.split(&quot;-&quot;);
		if(str.length&lt;=1){
			Failure = true; 
     		FailureMessage = vars.get(&quot;testDataId&quot;)+&quot;:&quot;+message+&quot;,look forward to[&quot;+expected+&quot;],Actually[&quot;+actual+&quot;].&quot;;
     		log.error(&quot;\n=============================================================\n&quot;+FailureMessage+&quot;\n=============================================================&quot;);
		}else{
			if(actual.equals(str[1])) {
				Failure = true; 
     			FailureMessage = vars.get(&quot;testDataId&quot;)+&quot;:&quot;+message+&quot;,look forward to[&quot;+expected+&quot;],Actually[&quot;+actual+&quot;].&quot;;
     			log.error(&quot;\n=============================================================\n&quot;+FailureMessage+&quot;\n=============================================================&quot;);
        		}	
		}
	} else{
		if(!actual.equals(expected)){
			Failure = true; 
     		FailureMessage = vars.get(&quot;testDataId&quot;)+&quot;:&quot;+message+&quot;,look forward to[&quot;+expected+&quot;],Actually[&quot;+actual+&quot;].&quot;;
     		log.error(&quot;\n=============================================================\n&quot;+FailureMessage+&quot;\n=============================================================&quot;);
		}
	}
}
//
//public static JSONObject parseResponseJson(String response){
//	if(response!=null&amp;&amp;!response.isEmpty()){
//		try{
//			return JSON.parseObject(response);
//		}catch(Exception e){
//			inputErrorLog(&quot;An exception occurred while parsing the response json message.&quot;+e.getMessage());
//			return null;
//		}
//	}
//	return null;
//}
//
//private static String getValueByXpath(String xPath,String html) {
//	log.info(&quot;\nStart parsing response text to HTML\n&quot;+html);
//	
//	TagNode tagNode = new HtmlCleaner().clean(html);
//	String value = null;
//	try {
//		Document doc = new DomSerializer(new CleanerProperties()).createDOM(tagNode);
//		XPath xpath = XPathFactory.newInstance().newXPath();
//		String value=xpath.evaluate(xPath, doc, XPathConstants.STRING);
//		return value;
//	} catch (Exception e) {
//		inputErrorLog(&quot;An error occurred parsing the response HTML&quot;+e.getMessage());
//		return null;
//	}
//}
//
//String responseBody = prev.getResponseDataAsString();
//if(responseBody==null||responseBody.isEmpty())
//{
//	inputErrorLog(&quot;No response text received.&quot;);
//}
log.info(&quot;yuanli test 66666666666----&quot;+vars.get(&quot;resultJson&quot;)+vars.get(&quot;generate_txnid&quot;));
String jsonrlt = vars.get(&quot;resultJson&quot;);
	//JSONObject jsobj = JSONObject.fromObject(jsonrlt);
JSONObject jsobj = JSON.parseObject(jsonrlt);
if(jsobj.size() != 0){
//	Iterator&lt;String&gt; iterator = jsobj.keys();log.info(&quot;yuanli test 889789789----&quot;);
//	StringBuilder sb = new StringBuilder();
//	while(iterator.hasNext()){
//		String key = iterator.next();
//		sb.append(key+&quot;,&quot;);
//	}
//	String[] jsonKey = sb.toString().split(&quot;,&quot;);
//	JSONObject jsonObject = JSONObject.fromObject(vars.getObject(&quot;dataPay&quot;));
//	JSONObject jan1 = jsonObject.get(&quot;expectedResult&quot;);
//	for(String str : jsonKey){
//		Assert(jsobj.getString(str),jan1.getString(str),&quot;Check &quot;+str+&quot;.&quot;);
//	}
  	JSONObject jsonObject = JSON.parseObject(vars.getObject(&quot;dataPay&quot;));
	JSONObject jan1 = jsonObject.get(&quot;expectedResult&quot;);
	for(String strKey : jsobj.keySet()) {
		if(strKey.equals(&quot;Txnid&quot;) &amp;&amp; jan1.getString(strKey).equals(&quot;generate&quot;)){ 
			Assert(jsobj.getString(strKey),vars.get(&quot;generate_txnid&quot;),&quot;Check &quot;+strKey+&quot;.&quot;);
		}else{
			Assert(jsobj.getString(strKey),jan1.getString(strKey),&quot;Check &quot;+strKey+&quot;.&quot;);
		}
		if(strKey.equals(&quot;Nttrefid&quot;)){
			vars.put(&quot;nttrefid&quot;, jsobj.getString(strKey));
		}
		if(strKey.equals(&quot;Txnid&quot;)){
			vars.put(&quot;resultTxnid&quot;, jsobj.getString(strKey));
		}
	}
}

SampleResult.setNttrefid(vars.get(&quot;nttrefid&quot;));
SampleResult.setTxnid(vars.get(&quot;resultTxnid&quot;));
log.info(&quot;See TxnidNttrefidLOG3DS Value-------------------------&quot;);

//String wechats = vars.get(&quot;wechats&quot;);
//log.info(&quot;yuanli test wechats----&quot;+wechats); 
//if(wechats == null || wechats.length() == 0){
//	JSONObject jsonObject = JSONObject.fromObject(vars.getObject(&quot;dataPay&quot;));
//	JSONObject jan1 = jsonObject.get(&quot;expectedResult&quot;);
//	 String ttxn = jan1.getString(&quot;txn&quot;);
//	 String ttxnid = jan1.getString(&quot;txnid&quot;);
//	 //String nnttrefid = jan1.getString(&quot;nttrefid&quot;);
//	
//	String resultTxnid = vars.get(&quot;resultTxnid&quot;);
//	Assert(resultTxnid, ttxnid,&quot;Check txnid.&quot;);
//	String resultTxn = vars.get(&quot;resultTxn&quot;);
//	Assert(resultTxn,ttxn,&quot;Verify payment results.&quot;);
//	
//	String resultNttrefid = vars.get(&quot;resultNttrefid&quot;);
//	vars.put(&quot;nttrefid&quot;, resultNttrefid);
//	 log.info(&quot;yuanli test 66666666666----&quot;+nnttrefid); 
//	if(resultNttrefid == null || resultNttrefid.length() == 0){
//		Assert(null,null,&quot;nttrefid cannot be null.&quot;);
//	}
//	
//	String resultDate = vars.get(&quot;resultDate&quot;);
//	if(resultDate == null || resultDate.length() == 0){
//		Assert(null,null,&quot;Date cannot be null.&quot;);
//	}
//}else if(wechats.equals(&quot;ipay88&quot;)){
//	String title = vars.get(&quot;title&quot;);
//	Assert(title, &quot;Log in to Maybank2u.com online banking&quot;,&quot;Check page title.&quot;);
//}else{
//	
//}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="form V2Transactions Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;formTransactionsV2ApiKey&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">charset</stringProp>
                    <stringProp name="Header.value">UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setFormRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="form payment Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;formpaymentRequest&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestParams}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setFormRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="form tokenize Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;formTokenizeRequest&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestParams}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setFormTokenizeRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="false">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="false">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="false">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Diagnostic Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;) !== &quot;undefined&quot; &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;cybsDB&quot;) &gt; -1 &amp;&amp; (vars.get(&quot;SkipDB&quot;) === &quot;undefined&quot; || vars.get(&quot;SkipDB&quot;) !== &quot;true&quot; ) )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${diagnosticBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(diagnosticDomain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">DiagnosticAPI/api/v1/diagnostic</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Diagnostic Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;setDiagnosticBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear header after http request" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;signature&quot;, null);
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Oauthtoken Request application/x-www-form-urlencoded" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;oauthToken&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestParams}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set oauthtoken Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">eval(props.get(&quot;commonUtilsJsContent&quot;));

var jsonData = JSON.parse(vars.get(&quot;jsonData&quot;));
commonUtils.setMerchantConfig(jsonData.merchantId);

var dataObj = vars.getObject(&quot;dataObj&quot;);

//vars.put(&quot;client_id&quot;,dataObj.client_id);
//vars.put(&quot;client_secret&quot;,dataObj.client_secret);
//vars.put(&quot;grant_type&quot;,dataObj.grant_type);
//vars.put(&quot;username&quot;,vars.get(&quot;login&quot;));
//vars.put(&quot;password&quot;,vars.get(&quot;pass&quot;));
//log.info(&quot;oauthtoke-login: &quot;+vars.get(&quot;login&quot;));
//log.info(&quot;oauthtoke-pass: &quot;+vars.get(&quot;pass&quot;));
var requestParams = &quot;&quot;;
var client_id = dataObj.client_id;
if(typeof(client_id) != &quot;undefined&quot; &amp;&amp; client_id != null &amp;&amp; client_id !=&quot;&quot;){
	requestParams +=  &quot;client_id=&quot; + client_id + &quot;&amp;&quot;;
}

var client_secret = dataObj.client_secret;
if(typeof(client_secret) != &quot;undefined&quot; &amp;&amp; client_secret != null &amp;&amp; client_secret !=&quot;&quot;){
	requestParams +=  &quot;client_secret=&quot; + client_secret + &quot;&amp;&quot;;
}

var grant_type = dataObj.grant_type;
if(typeof(grant_type) != &quot;undefined&quot; &amp;&amp; grant_type != null &amp;&amp; grant_type !=&quot;&quot;){
	requestParams +=  &quot;grant_type=&quot; + grant_type + &quot;&amp;&quot;;
	if(grant_type == &quot;password&quot;){
		var username = dataObj.username;
		if(typeof(username) == &quot;undefined&quot; || username == null){
		//	vars.put(&quot;username&quot;,vars.get(&quot;login&quot;));
			requestParams +=  &quot;username=&quot; + vars.get(&quot;login&quot;) + &quot;&amp;&quot;;
			log.info(&quot;oauthtoke-login: &quot;+vars.get(&quot;login&quot;));
		}else{
			if(username !=&quot;&quot;){
		//		vars.put(&quot;username&quot;,username);
				requestParams +=  &quot;username=&quot; + username + &quot;&amp;&quot;;
			}
			log.info(&quot;oauthtoke-login: &quot;+username);
		}
		
		var password = dataObj.password;
		if(typeof(password) == &quot;undefined&quot; || password == null){
		//	vars.put(&quot;password&quot;,vars.get(&quot;pass&quot;));
			requestParams +=  &quot;password=&quot; + vars.get(&quot;pass&quot;) + &quot;&amp;&quot;;
			log.info(&quot;oauthtoke-pass: &quot;+vars.get(&quot;pass&quot;));
		}else{
			if(password !=&quot;&quot;){
		//		vars.put(&quot;password&quot;,password);
				requestParams +=  &quot;password=&quot; + ${__urlencode(password)} + &quot;&amp;&quot;;
			}
			log.info(&quot;oauthtoke-pass: &quot;+${__urlencode(password)});
		}
	}
}
var scope = dataObj.scope;
if(typeof(scope) != &quot;undefined&quot; &amp;&amp; scope != null &amp;&amp; scope !=&quot;&quot;){
	requestParams +=  &quot;scope=&quot; + scope + &quot;&amp;&quot;;
}

var requestBody = requestParams.substring(0,requestParams.length()-1);
log.info(&quot;requestBody:&quot;+requestBody);
//${__substring(requestParams,0,requestParams.length()-1,)}
vars.put(&quot;requestParams&quot;,requestBody);
var requestType = vars.get(&quot;requestType&quot;);
vars.put(&quot;requestURL&quot;, props.get(requestType + &quot;URL&quot;));</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set oauthtoken Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var jsonBody = JSON.parse(prev.getResponseDataAsString());

if(jsonBody.access_token){
	vars.put(&quot;access_token&quot;, jsonBody.access_token);
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="333505059">200|400|401</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Oauthtoken Request application/json" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;jsonOauthToken&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set oauthtoken Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set oauthtoken Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var jsonBody = JSON.parse(prev.getResponseDataAsString());

if(jsonBody.access_token){
	vars.put(&quot;access_token&quot;, jsonBody.access_token);
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="333505059">200|400|401</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AccountUpdater Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;accountUpdater&quot;) &gt; -1 )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">Ndhk_Api/accountUpdater</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">cookie</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">${signatureKey}</stringProp>
                    <stringProp name="Header.value">${signature}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${access_token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set accountUpdater Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">eval(props.get(&quot;commonUtilsJsContent&quot;));

var jsonData = JSON.parse(vars.get(&quot;jsonData&quot;));
var dataObj = vars.getObject(&quot;dataObj&quot;);
var requestType = vars.get(&quot;requestType&quot;);
var requestBody = JSON.parse(props.get(requestType + &quot;Body&quot;));


commonUtils.setMerchantConfig(jsonData.merchantId);
commonUtils.setDataObjIntoVars(dataObj);
commonUtils.removeUnusedKey(requestBody);
commonUtils.setVarsKeyIntoRequestBody(requestBody);

if(requestBody.memberId==&quot;generate&quot;){
	var timeStr =new Date().getTime()+&quot;&quot;;
	requestBody.memberId=timeStr;
	vars.put(&quot;accountUpdater_memberId&quot;,timeStr);
}else if(requestBody.memberId==&quot;reuse&quot;){
	requestBody.memberId=vars.get(&quot;accountUpdater_memberId&quot;);
}

vars.put(&quot;signatureData&quot;, JSON.stringify(requestBody));
vars.put(&quot;requestBody&quot;, JSON.stringify(requestBody));

var token = vars.get(&quot;access_token&quot;);
if(typeof(token) == &quot;undefined&quot; || token == &apos;&apos; || token == null){
	var dataObjToken = dataObj.accessToken;
	if(typeof(dataObjToken) == &quot;undefined&quot; || dataObjToken == &apos;&apos; || dataObjToken == null){
		vars.putObject(&quot;access_token&quot;, &quot;&quot;);
	}else{
		vars.put(&quot;access_token&quot;, dataObjToken);
	}
}else{
	vars.put(&quot;access_token&quot;, &quot;Bearer&quot;+&quot; &quot;+token);
}

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var dataObj = vars.getObject(&quot;dataObj&quot;);

if(typeof(dataObj.signature) == &quot;undefined&quot; || dataObj.signature == &apos;&apos; || dataObj.signature == null){
	vars.put(&quot;signature&quot;, vars.get(&quot;signature&quot;));
}else{
	vars.put(&quot;signature&quot;, dataObj.signature);
}


if(typeof(dataObj.signatureKey) == &quot;undefined&quot; || dataObj.signatureKey == &apos;&apos; || dataObj.signatureKey == null){
	vars.put(&quot;signatureKey&quot;, &quot;signature&quot;);
}else{
	vars.putObject(&quot;signatureKey&quot;, &quot;&quot;);
}</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set AccountUpdater Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var jsonBody = JSON.parse(prev.getResponseDataAsString());

if(jsonBody.memberId){
	vars.put(&quot;generate_txnid&quot;,jsonBody.memberId);
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AccountV2Updater Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;accountV2Updater&quot;) &gt; -1 )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">Ndhk_Api/accountUpdater</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">cookie</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">${signatureKey}</stringProp>
                    <stringProp name="Header.value">${signature}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${access_token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set accountUpdater Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">eval(props.get(&quot;commonUtilsJsContent&quot;));

var jsonData = JSON.parse(vars.get(&quot;jsonData&quot;));
var dataObj = vars.getObject(&quot;dataObj&quot;);
var requestType = vars.get(&quot;requestType&quot;);
var requestBody = JSON.parse(props.get(requestType + &quot;Body&quot;));


commonUtils.setMerchantConfig(jsonData.merchantId);
commonUtils.setDataObjIntoVars(dataObj);
commonUtils.removeUnusedKey(requestBody);
commonUtils.setVarsKeyIntoRequestBody(requestBody);

if(requestBody.memberId==&quot;generate&quot;){
	var timeStr =new Date().getTime()+&quot;&quot;;
	requestBody.memberId=timeStr;
	vars.put(&quot;accountUpdater_memberId&quot;,timeStr);
}else if(requestBody.memberId==&quot;reuse&quot;){
	requestBody.memberId=vars.get(&quot;accountUpdater_memberId&quot;);
}

vars.put(&quot;signatureData&quot;, JSON.stringify(requestBody));
vars.put(&quot;requestBody&quot;, JSON.stringify(requestBody));

var token = vars.get(&quot;access_token&quot;);
if(typeof(token) == &quot;undefined&quot; || token == &apos;&apos; || token == null){
	var dataObjToken = dataObj.accessToken;
	if(typeof(dataObjToken) == &quot;undefined&quot; || dataObjToken == &apos;&apos; || dataObjToken == null){
		vars.putObject(&quot;access_token&quot;, &quot;&quot;);
	}else{
		vars.put(&quot;access_token&quot;, dataObjToken);
	}
}else{
	vars.put(&quot;access_token&quot;, &quot;Bearer&quot;+&quot; &quot;+token);
}

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var dataObj = vars.getObject(&quot;dataObj&quot;);

if(typeof(dataObj.signature) == &quot;undefined&quot; || dataObj.signature == &apos;&apos; || dataObj.signature == null){
	vars.put(&quot;signature&quot;, vars.get(&quot;signature&quot;));
}else{
	vars.put(&quot;signature&quot;, dataObj.signature);
}


if(typeof(dataObj.signatureKey) == &quot;undefined&quot; || dataObj.signatureKey == &apos;&apos; || dataObj.signatureKey == null){
	vars.put(&quot;signatureKey&quot;, &quot;signature&quot;);
}else{
	vars.putObject(&quot;signatureKey&quot;, &quot;&quot;);
}</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set AccountUpdater Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var jsonBody = JSON.parse(prev.getResponseDataAsString());

if(jsonBody.memberId){
	vars.put(&quot;generate_txnid&quot;,jsonBody.memberId);
}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="GetToken" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getToken&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">Ndhk_Api/${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PutToken" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putToken&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">Ndhk_Api/${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DeleteToken" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteToken&quot;) &gt; -1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">Ndhk_Api/${requestURL}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CheckToken  Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;checkToken&quot;) &gt; -1 )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${access_token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">token</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(domain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">oauth/check_token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set checkToken Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">eval(props.get(&quot;commonUtilsJsContent&quot;));
//log.info(&quot;see value  ----------dataObj.token------------&gt;&quot;+dataObj.token);
//vars.put(&quot;access_token&quot;,dataObj.token);

var dataObj = vars.getObject(&quot;dataObj&quot;);
var token = vars.get(&quot;access_token&quot;);
if(typeof(token) == &quot;undefined&quot; || token == &apos;&apos; || token == null){
	var dataObjToken = dataObj.token;
	if(typeof(dataObjToken) == &quot;undefined&quot; || dataObjToken == &apos;&apos; || dataObjToken == null){
		vars.putObject(&quot;access_token&quot;, &quot;&quot;);
	}else{
		vars.put(&quot;access_token&quot;, dataObjToken);
	}
}else{
	vars.put(&quot;access_token&quot;, token);
}</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Invalid Token Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1447182358">200|400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Next Test Flow" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;setNextTestFlow.js&quot;)}</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"></stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Log Diagnostic Request" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;) !== &quot;undefined&quot; &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;cybsLog&quot;) &gt; -1 &amp;&amp; (vars.get(&quot;SkipLog&quot;) === &quot;undefined&quot; || vars.get(&quot;SkipLog&quot;) !== &quot;true&quot; ) )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${diagnosticBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(diagnosticDomain)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">DiagnosticAPI/api/v1/diagnostic</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell 定时器" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">log.info(&quot;xxzy test ----&quot;+vars.get(&quot;currenctDataObjSet&quot;));

String cybsLog = vars.get(&quot;currenctDataObjSet&quot;);
if(cybsLog.equals(&quot;cybsLog&quot;) || cybsLog.equals(&quot;cybsLog1&quot;)){
	log.info(&quot;xxzy test 123----&quot;);
	Thread.sleep(5000);
} else if(cybsLog.equals(&quot;cybsLogCallback&quot;)){
     log.info(&quot;xxzy test cybsLogCallbackJson1----&quot;);
	Thread.sleep(190000);
} else{	
	Thread.sleep(1000);
	log.info(&quot;xxzy test 789----&quot;);
}
log.info(&quot;xxzy test Wait for the end000**&quot;);</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Diagnostic Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;setLogBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DiagnosticRequest&quot; + File.separator + &quot;jsonLogResponseAssertion.js&quot;)}</stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Report" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Report Generator" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;Report&quot; + File.separator + &quot;reportGenerator.bsh&quot;)}</stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(homeDirectory)}/TestResults/CaptureRequestResponse.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
