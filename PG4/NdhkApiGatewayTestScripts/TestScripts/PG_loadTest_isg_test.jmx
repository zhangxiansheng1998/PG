<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="NTTdata" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">126</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Direct Request" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;requestType&quot;).indexOf(&quot;frontend&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;oauthToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;accountUpdater&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;checkToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;jsonOauthToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteToken&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;jsonV2TokenApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;formTransactionsV2ApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getTransactionsV2ApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putAccountV2UpdatesApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteAccountV2UpdatesApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;getV2TokenApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;deleteV2TokenApiKey&quot;) == -1 &amp;&amp; vars.get(&quot;requestType&quot;).indexOf(&quot;putV2TokenApiKey&quot;) == -1)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${testDataId}: -${requestType}-${currenctDataObjSet}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">    {&#xd;
        &quot;testDataId&quot;: &quot;ISG Scenario 4&quot;,&#xd;
        &quot;OD&quot;: &quot;Purchase - Refund&quot;,&#xd;
        &quot;merchantId&quot;: &quot;nttv2&quot;,&#xd;
        &quot;Skip&quot;: false,&#xd;
        &quot;caseType&quot;: &quot;ISG Card&quot;,&#xd;
        &quot;testFlow&quot;: [&#xd;
           &#xd;
            &quot;jsonTransactionsV2ApiKey-purchase&quot;&#xd;
           &#xd;
        ],&#xd;
       &#xd;
        &quot;purchase&quot;: {&#xd;
            &quot;headerSignature&quot;: true,&#xd;
            &quot;bodySignature&quot;: false,&#xd;
            &quot;amount&quot;: &quot;100&quot;,&#xd;
            &quot;transactionCurrency&quot;: &quot;HKD&quot;,&#xd;
            &quot;transactionId&quot;: &quot;generate&quot;,&#xd;
            &quot;orderDescription&quot;: &quot;ISG Card API Test -Xiaojing&quot;,&#xd;
            &quot;paymentMode&quot;: &quot;PURCHASE&quot;,&#xd;
            &quot;paymentMethod&quot;: &quot;card&quot;,&#xd;
            &quot;channelType&quot;: &quot;isg&quot;,&#xd;
            &quot;cardData&quot;: &quot;XZ13aC5625frSmc4S5dYsObXyDQb09T98JF+ZRBLXK8Az8CTcp/omI/I+Rs=|John Doe|CC|VISA&quot;,&#xd;
            &quot;isAuthentication&quot;: false,&#xd;
            &quot;callbackUrl&quot;: &quot;https://script.google.com/macros/s/AKfycbwRpCfYEQiDPGvCdE_mJXPWa9z42oSquQ4Ua5jQjd9B_k-L1wA/exec&quot;,&#xd;
            &quot;returnUrl&quot;: &quot;https://uat.ndhkpay.com/payment-page&quot;,&#xd;
            &quot;userDefinedData1&quot;: &quot;userDefinedData1……&amp;*测试 thử&quot;,&#xd;
            &quot;userDefinedData2&quot;: &quot;userDefinedData2%&amp;汉字 thử&quot;,&#xd;
            &quot;userDefinedData3&quot;: &quot;（userDefinedData3%&amp;*测试） thử&quot;,&#xd;
            &quot;userDefinedData4&quot;: &quot;userDefinedData4#%￥②测 thử&quot;,&#xd;
            &quot;userDefinedData5&quot;: &quot;userDefinedData5符号~~ thử&quot;,&#xd;
            &quot;customerDetails&quot;: {&#xd;
                &quot;ipAddress&quot;: &quot;127.0.0.1&quot;,&#xd;
                &quot;name&quot;: &quot;Joe&quot;,&#xd;
                &quot;phone&quot;: &quot;852-94717223&quot;,&#xd;
                &quot;email&quot;: &quot;sample@gmail.com&quot;&#xd;
            },&#xd;
            &quot;expectedResult&quot;: {&#xd;
                &quot;amount&quot;: &quot;100&quot;,&#xd;
                &quot;channelType&quot;: &quot;isg&quot;,&#xd;
                &quot;paymentMethod&quot;: &quot;card&quot;,&#xd;
                &quot;paymentMode&quot;: &quot;PURCHASE&quot;,&#xd;
                &quot;processorCode&quot;: &quot;00&quot;,&#xd;
                &quot;responseCode&quot;: &quot;00&quot;,&#xd;
                &quot;responseDescription&quot;: &quot;success&quot;,&#xd;
                &quot;transactionCurrency&quot;: &quot;HKD&quot;,&#xd;
                &quot;userDefinedData1&quot;: &quot;userDefinedData1&amp;hellip;&amp;hellip;&amp;amp;*测试 thử&quot;,&#xd;
                &quot;userDefinedData2&quot;: &quot;userDefinedData2%&amp;amp;汉字 thử&quot;,&#xd;
                &quot;userDefinedData3&quot;: &quot;（userDefinedData3%&amp;amp;*测试） thử&quot;,&#xd;
                &quot;userDefinedData4&quot;: &quot;userDefinedData4#%￥②测 thử&quot;,&#xd;
                &quot;userDefinedData5&quot;: &quot;userDefinedData5符号~~ thử&quot;&#xd;
            },&#xd;
            &quot;needAssert&quot;: [&#xd;
                &quot;amount&quot;,&#xd;
                &quot;channelType&quot;,&#xd;
                &quot;paymentMethod&quot;,&#xd;
                &quot;paymentMode&quot;,&#xd;
                &quot;processorCode&quot;,&#xd;
                &quot;responseCode&quot;,&#xd;
                &quot;responseDescription&quot;,&#xd;
                &quot;transactionCurrency&quot;,&#xd;
                &quot;userDefinedData1&quot;,&#xd;
                &quot;userDefinedData2&quot;,&#xd;
                &quot;userDefinedData3&quot;,&#xd;
                &quot;userDefinedData4&quot;,&#xd;
                &quot;userDefinedData5&quot;&#xd;
            ]&#xd;
        }&#xd;
    &#xd;
    }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">sit.ndhkpay.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/transactions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="JSON Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Request Body" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestBody.js&quot;)}</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Signature Generation" enabled="true">
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;signatureGeneration.bsh&quot;)}</stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Add Signature To Request Body" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;addSignatureToRequestBody.js&quot;)}</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Result Parameters" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setResultParameters.js&quot;)}</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Response Signature Generation" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;responseSignatureGeneration.bsh&quot;)}</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set Response Signature" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;SetResponseSignature.js&quot;)}</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CaptureRequest Delay" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;captureRequestDelay.bsh&quot;)}</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSON Response Assertion" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;jsonResponseAssertion.js&quot;)}</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear header before http request" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.Header;
import java.lang.String;

HeaderManager headerManager = sampler.getHeaderManager();

log.info(&quot;need remove apiKey and signature from head after http request&quot;);
log.info(&quot;before :headerManager&apos;s size is &quot;+headerManager.size());

headerManager.removeHeaderNamed(&quot;apikey&quot;);
headerManager.removeHeaderNamed(&quot;signature&quot;);
log.info(&quot;after ：headerManager&apos;s size is &quot;+headerManager.size());</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="clear signature after http request" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//vars.put(&quot;signature&quot;, null);
vars.remove(&quot;signature&quot;);
vars.remove(&quot;headerSignatureData&quot;);
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Request Header" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename">${__BeanShell(props.get(&quot;homeDirectory&quot;)+ &quot;TestScripts&quot; + File.separator + &quot;FunctionalTests&quot; + File.separator + &quot;DirectRequest&quot; + File.separator + &quot;setRequestHeader.bsh&quot;)}</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
